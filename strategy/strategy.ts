type AuthCtx = {
  username: string;
  password: string;
};

type AuthResponse = {
  token: string;
};

class MudAuthService {
  // ü§¢ –ú–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏–π, –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –º–µ—Ç–æ–¥—É
  // –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –µ–≥–æ —Ä–∞–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏ —É—Å–ª–æ–∂–Ω–µ–Ω–∏—é
  public auth(authCtx: AuthCtx, type: string) {
    if (type === "facebook") {
      console.log("facebook auth", { authCtx });
      // more code here...
    } else if (type === "google") {
      console.log("google auth", { authCtx });
      // more code here...
    } else if (type === "twitter") {
      console.log("twitter auth", { authCtx });
      // more code here...
    } else {
      console.log("default auth", { authCtx });
      // more code here...
    }
  }
}

interface IAuthStrategy {
  auth(authCtx: AuthCtx): AuthResponse;
  logout: () => void;
}

class FacebookAuthStrategy implements IAuthStrategy {
  public auth(authCtx: AuthCtx) {
    console.log("facebook auth", { authCtx });
    // more code here...

    return { token: "facebook_token" };
  }

  public logout() {
    console.log("facebook logout");
  }
}

class GoogleAuthStrategy implements IAuthStrategy {
  public auth(authCtx: AuthCtx) {
    console.log("google auth", { authCtx });
    // more code here...

    return { token: "google_token" };
  }

  public logout() {
    console.log("google logout");
  }
}

class TwitterAuthStrategy implements IAuthStrategy {
  public auth(authCtx: AuthCtx) {
    console.log("twitter auth", { authCtx });
    // more code here...

    return { token: "twitter_token" };
  }

  public logout() {
    console.log("twitter logout");
  }
}

class DefaultAuthStrategy implements IAuthStrategy {
  public auth(authCtx: AuthCtx) {
    console.log("default auth", { authCtx });
    // more code here...

    return {
      token: "default_token",
    };
  }

  public logout() {
    console.log("default logout");
  }
}

// "–°—Ç—Ä–∞—Ç–µ–≥–∏—è" —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–ª–∞—Å—Å
// –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –æ–±—ä–µ–∫—Ç
type LogStrategy = (message: string) => void;

const logToConsole: LogStrategy = (message) => {
  console.log(message);
};

const logToFile: LogStrategy = (message) => {
  console.log("log to file", { message });
};

const logToHttp: LogStrategy = (message) => {
  console.log("log to http", { message });
};

class AuthService {
  private authStrategy: IAuthStrategy;
  private logStrategy: LogStrategy;

  constructor(authStrategy: IAuthStrategy, logStrategy: LogStrategy) {
    this.authStrategy = authStrategy;
    this.logStrategy = logStrategy;
  }

  // üëç –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ —Ö–æ–¥—É
  public changeAuthStrategy(authStrategy: IAuthStrategy) {
    this.authStrategy = authStrategy;
  }

  public changeLogStrategy(logStrategy: LogStrategy) {
    this.logStrategy = logStrategy;
  }

  // –í—Å—è –ª–æ–≥–∏–∫–∞ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É, –ø—Ä–∏ —ç—Ç–æ–º –µ–º—É –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞,
  // –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –≤—Å—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Ö–æ–¥–∏—Ç –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ "–°—Ç—Ä–∞—Ç–µ–≥–∏—è"
  public auth(authCtx: AuthCtx) {
    const authRes = this.authStrategy.auth(authCtx);

    this.logStrategy(
      `User ${authCtx.username} logged in and obtained token: ${authRes.token}`
    );
  }

  public logout() {
    this.authStrategy.logout();

    this.logStrategy("User logged out");
  }
}
