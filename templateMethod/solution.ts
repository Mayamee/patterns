import { WeatherResult, WeatherReport } from "./types";

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
abstract class WeatherClient {
  // üü¢ –®–∞–±–ª–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
  public async getTomorrowReport(city: string) {
    // –®–∞–≥ 0 - –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç
    if (!this.canMakeReport()) {
      throw new Error("Can't make report");
    }

    // –®–∞–≥ 1 - –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const tomorrowData = await this.getTomorrowWeatherReport(city);
    // –®–∞–≥ 2 - –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    return this.makeReport(tomorrowData);
  }

  protected canMakeReport(): boolean {
    return true;
  }

  protected makeReport(data: WeatherResult): WeatherReport {
    const temperatures = data.data.map(({ temperature }) => temperature);

    return {
      averageTemperature:
        temperatures.reduce((acc, temp) => acc + temp, 0) / temperatures.length,
      maxTemperature: Math.max(...temperatures),
      minTemperature: Math.min(...temperatures),
    };
  }

  protected abstract getCredentials(): { apiKey: string };

  protected abstract getTomorrowWeatherReport(
    city: string
  ): Promise<WeatherResult>;
}

class NewOpenWeatherClient extends WeatherClient {
  private isAdmin: boolean;

  constructor(isAdmin: boolean) {
    super();
    this.isAdmin = isAdmin;
  }

  protected canMakeReport(): boolean {
    return this.isAdmin;
  }

  // üü¢ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
  protected override getCredentials(): { apiKey: string } {
    return {
      apiKey: "some_api",
    };
  }

  // üü¢ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
  protected override async getTomorrowWeatherReport(
    city: string
  ): Promise<WeatherResult> {
    const { apiKey } = this.getCredentials();

    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric&lang=ru`
      );

      const data = await response.json();

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞: ${data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
      }

      const now = new Date();
      const tomorrow = new Date();
      tomorrow.setDate(now.getDate() + 1);

      const forecast = data.list.filter((item: any) => {
        const forecastDate = new Date(item.dt * 1000);
        return forecastDate.getDate() === tomorrow.getDate();
      });

      const formattedForecast = forecast.map((item: any) => ({
        time: item.dt_txt.slice(0, 16), // –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
        temperature: parseFloat(item.main.temp.toFixed(1)), // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      }));

      return { data: formattedForecast };
    } catch (error) {
      throw new Error("Failed to fetch weather data");
    }
  }
}

class NewWeatherApiClient extends WeatherClient {
  // üü¢ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
  protected getCredentials(): { apiKey: string } {
    return {
      apiKey: "068c3f08632d468cb7a174620250203",
    };
  }

  // üü¢ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
  protected async getTomorrowWeatherReport(
    city: string
  ): Promise<WeatherResult> {
    const { apiKey } = this.getCredentials();

    try {
      const response = await fetch(
        `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=2&aqi=no&alerts=no&lang=ru`
      );

      const data = await response.json();

      if (!response.ok) {
        throw new Error(
          `–û—à–∏–±–∫–∞: ${data.error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`
        );
      }

      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      const tomorrowDateStr = tomorrow.toISOString().split("T")[0];

      const forecast = data.forecast.forecastday.find(
        (day) => day.date === tomorrowDateStr
      );

      const formattedForecast =
        forecast?.hour.map((item: any) => ({
          time: item.time,
          temperature: item.temp_c,
        })) || [];

      return { data: formattedForecast };
    } catch (error) {
      throw new Error("Failed to fetch weather data");
    }
  }
}
