import { WeatherResult, WeatherReport } from "./types";

/**
 * –ó–∞ —Å—á–µ—Ç –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –º—ã –∑–∞–º–µ–Ω—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
 * –í—ã–≥–ª—è–¥–∏—Ç –Ω–µ–º–Ω–æ–≥–æ –≥—Ä–æ–º–æ–∑–¥–∫–æ, –Ω–æ –Ω–∞–≥–ª—è–¥–Ω–æ
 * –¢—É–ø–æ –≤—ã–Ω–æ—Å–∏–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –∏–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
 * (–µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—É –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–∏–¥—É–º–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ Service),
 * –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
 * Service - —Å—É—â–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞ –¥–ª—è –≤—ã–Ω–æ—Å–∞ –∫–∞–∫–æ–π-—Ç–æ –ª–æ–≥–∏–∫–∏
 **/

// –ê–π–≤–µ–∞–∑–µ—Ä–°–µ—Ä–≤–∏—Å - —á–µ—Ç–æ —Ç–∞–º –ø–æ–≥–æ–¥–æ–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å, –≥—Ä—É–ø–ø–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
// —Å–µ—Ä–≤–∏—Å–∞ –∂–¥–µ—Ç —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –∏–º –ø–æ–º–æ–≥–∞—Ç—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–≥–æ–¥–µ
interface IWeatherService {
  getTomorrowWeatherReport(city: string): Promise<WeatherResult>;
}

interface IReportMaker {
  makeReport(data: WeatherResult): WeatherReport;
}

interface IWeatherClient {
  getTomorrowReport(city: string): Promise<WeatherReport>;
}

interface IMakeReportAllower {
  canMakeReport(): boolean;
}

class WeatherClient implements IWeatherClient {
  private weatherService: IWeatherService;
  private reportMaker: IReportMaker;
  private makeReportAllower: IMakeReportAllower;

  constructor(
    weatherService: IWeatherService,
    reportMaker: IReportMaker,
    makeReportAllower: IMakeReportAllower
  ) {
    this.weatherService = weatherService;
    this.reportMaker = reportMaker;
    this.makeReportAllower = makeReportAllower;
  }

  // üü¢ –®–∞–±–ª–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
  public async getTomorrowReport(city: string) {
    // –®–∞–≥ 0 - –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç
    if (!this.makeReportAllower.canMakeReport()) {
      throw new Error("Can't make report");
    }

    // –®–∞–≥ 1 - –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const tomorrowData = await this.weatherService.getTomorrowWeatherReport(
      city
    );

    // –®–∞–≥ 2 - –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    return this.reportMaker.makeReport(tomorrowData);
  }
}

class OpenWeatherService implements IWeatherService {
  private apiKey: string;

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  public async getTomorrowWeatherReport(city: string): Promise<WeatherResult> {
    const response = await fetch(
      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${this.apiKey}&units=metric&lang=ru`
    );

    const data = await response.json();

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞: ${data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
    }

    const now = new Date();
    const tomorrow = new Date();
    tomorrow.setDate(now.getDate() + 1);

    const forecast = data.list.filter((item: any) => {
      const forecastDate = new Date(item.dt * 1000);
      return forecastDate.getDate() === tomorrow.getDate();
    });

    const formattedForecast = forecast.map((item: any) => ({
      time: item.dt_txt.slice(0, 16),
      temperature: parseFloat(item.main.temp.toFixed(1)),
    }));

    return { data: formattedForecast };
  }
}

class WeatherApiService implements IWeatherService {
  private apiKey: string;

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  public async getTomorrowWeatherReport(city: string): Promise<WeatherResult> {
    const response = await fetch(
      `https://api.weatherapi.com/v1/forecast.json?key=${this.apiKey}&q=${city}&days=2&aqi=no&alerts=no&lang=ru`
    );

    const data = await response.json();

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞: ${data.error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
    }

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowDateStr = tomorrow.toISOString().split("T")[0];

    const forecast = data.forecast.forecastday.find(
      (day) => day.date === tomorrowDateStr
    );

    const formattedForecast =
      forecast?.hour.map((item: any) => ({
        time: item.time,
        temperature: item.temp_c,
      })) || [];

    return { data: formattedForecast };
  }
}

class DefaultReportMaker implements IReportMaker {
  public makeReport(data: WeatherResult): WeatherReport {
    const temperatures = data.data.map(({ temperature }) => temperature);

    return {
      averageTemperature:
        temperatures.reduce((acc, temp) => acc + temp, 0) / temperatures.length,
      maxTemperature: Math.max(...temperatures),
      minTemperature: Math.min(...temperatures),
    };
  }
}

class MakeReportAllower implements IMakeReportAllower {
  public canMakeReport(): boolean {
    return true;
  }
}

const openWeatherService = new OpenWeatherService("some_api");
const weatherApiService = new WeatherApiService(
  "068c3f08632d468cb7a174620250203"
);
const makeReportAllower = new MakeReportAllower();
const reportMaker = new DefaultReportMaker();

const openWeatherClient = new WeatherClient(
  openWeatherService,
  reportMaker,
  makeReportAllower
);
const weatherApiClient = new WeatherClient(
  weatherApiService,
  reportMaker,
  makeReportAllower
);
